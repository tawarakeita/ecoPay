<div class="bg-gray"></div>
  <h1 class="mt-9 mb-5 flex justify-center text-3xl">協賛店を検索</h1>

  <div class="flex border-b border-gray-300">
    <button id="map-tab" class="px-4 py-2 -mb-px font-medium text-gray-700 border-b-2 border-green-800 focus:outline-none">
      マップから検索
    </button>
    <button id="municipality-tab" class="px-4 py-2 -mb-px font-medium text-gray-500 hover:text-gray-700 border-b-2 border-transparent focus:outline-none">
      市町村から検索
    </button>
  </div>
</div>

<div id="tab-content" class="m-3 h-[calc(100dvh - 175px)]" style="height: calc(100dvh - 335px);">
  <%= render partial: "map_mode" %>
</div>

<!-- 協賛店の詳細ポップアップ -->
<div popover id="merchant-detail" class="h-[40vh] w-[80vw] absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-white border-gray-100 border-1 rounded-xl shadow-lg">
  <div class="h-full w-full p-3 flex flex-col items-center justify-center">
    <button popovertarget="merchant-detail" popovertargetaction="hide" class="text-2xl absolute top-3 right-5">×</button>
    <span class="text-2xl mb-6">協賛店情報</span>
    <div class="flex mr-auto">
      <img src="https://placehold.jp/cccccc/999999/80x80.png?text=No%20Image" alt="店舗画像" class="w-[80px] h-[80px] object-cover rounded">
      <div class="flex flex-col items-start justify-center ml-4">
        <span id="merchant-name" class="text-lg font-semibold text-gray-800 mb-1"></span>
        <span id="merchant-address" class="text-gray-800 text-[12px]"></span>
      </div>
    </div>
    <span class="mt-3" id="merchant-description" class="text-gray-800 text-[12px]"></span>
  </div>
</div>

<script>
  const merchants = <%= raw(@merchants.to_json(only: [:latitude, :longitude, :name, :address, :description], methods: [:image_url])) %>;

  let map;
  let marker = [];
  let infoWindow = [];
  let previous_i;

  // 吹き出しの内容（✕ボタン＋詳細ボタン）
  function windowDetail(obj, i) {
    return `
      <div class="relative w-40 h-25 p-3 mt-1">
        <button
          class="absolute top-1 right-1 text-gray-500 hover:text-gray-700 text-xl font-bold close-btn"
          data-index="${i}"
          style="background: none; border: none; cursor: pointer;">
          ×
        </button>

        <div class="mb-2 mt-6 font-semibold text-[18px]">${obj.name}</div>
        <button
          class="text-blue-500 detail-btn"
          data-index="${i}"
          data-name="${obj.name}"
          data-address="${obj.address}"
          data-description="${obj.description}"
          data-image-url="${obj.image_url || ''}"
          popovertarget="merchant-detail"
        >
          詳細を見る
        </button>
      </div>
    `;
  }

  // マーカークリック時
  function markerEvent(i) {
    marker[i].addListener('click', function() {
      if (previous_i !== undefined) {
        infoWindow[previous_i].close();
      }

      infoWindow[i].open({
        anchor: marker[i],
        map,
      });
      previous_i = i;

      // InfoWindowのDOMがロードされたあとにイベント追加
      google.maps.event.addListenerOnce(infoWindow[i], 'domready', () => {
        // ✕ボタン動作
        const closeBtn = document.querySelector(`.close-btn[data-index="${i}"]`);
        if (closeBtn) closeBtn.addEventListener('click', () => infoWindow[i].close());

        // 「詳細を見る」動作
        const detailBtn = document.querySelector(`.detail-btn[data-index="${i}"]`);
        if (detailBtn) {
          detailBtn.addEventListener('click', () => {
            const name = detailBtn.dataset.name;
            const address = detailBtn.dataset.address;
            const description = detailBtn.dataset.description || "説明文が登録されていません。";
            const imageUrl = detailBtn.dataset.imageUrl;
            document.getElementById('merchant-name').innerText = name;
            document.getElementById('merchant-address').innerText = address;
            document.getElementById('merchant-description').innerText = description;
            // 画像も更新
            const merchantImage = document.querySelector('#merchant-detail img');
            if (merchantImage) {
              merchantImage.src = imageUrl && imageUrl.length > 0 ? imageUrl : 'https://placehold.jp/cccccc/999999/80x80.png?text=No%20Image';
            }
          });
        }
      });
    });
  }

  // マーカーをセット
  function setMarkers(data) {
    for (let i = 0; i < data.length; i++) {
      const position = { lat: parseFloat(data[i].latitude), lng: parseFloat(data[i].longitude) };
      marker[i] = new google.maps.Marker({
        position,
        map,
        title: data[i].name,
        icon: { url: '/img/map_logo.png' }
      });

      infoWindow[i] = new google.maps.InfoWindow({
        content: windowDetail(data[i], i)
      });

      markerEvent(i);
    }
  }

  // 地図を初期化
  function initMap() {
    map = new google.maps.Map(document.getElementById("custom-map"), {
      center: { lat: 35.658581, lng: 139.745433 },
      zoom: 12,
    });

    if (merchants && merchants.length > 0) {
      setMarkers(merchants);
    }
  }

  window.initMap = initMap;
</script>

<script>
  // タブ要素
  const mapTab = document.getElementById('map-tab');
  const municipalityTab = document.getElementById('municipality-tab');
  const tabContent = document.getElementById('tab-content');

  mapTab.addEventListener('click', () => {
    // タブの見た目切り替え
    mapTab.classList.add('text-gray-700', 'border-green-800');
    mapTab.classList.remove('text-gray-500', 'border-transparent');
    municipalityTab.classList.add('text-gray-500', 'border-transparent');
    municipalityTab.classList.remove('text-gray-700', 'border-green-800');

    // URLパラメータをクリア
    const url = new URL(window.location);
    url.searchParams.delete('municipality_id');
    window.history.replaceState({}, '', url);

    // コンテンツ切り替え
    tabContent.innerHTML = `<%= j(render partial: "map_mode") %>`;

    // マップの初期化（再描画）
    if (typeof initMap === "function") initMap();
  });

  municipalityTab.addEventListener('click', () => {
    // タブの見た目切り替え
    municipalityTab.classList.add('text-gray-700', 'border-green-800');
    municipalityTab.classList.remove('text-gray-500', 'border-transparent');
    mapTab.classList.add('text-gray-500', 'border-transparent');
    mapTab.classList.remove('text-gray-700', 'border-green-800');

    // コンテンツ切り替え - Turbo Frameを使用
    tabContent.innerHTML = `<%= j(render partial: "merchant_search/municipality_mode") %>`;
  });
</script>

<style>
  /* Google Mapsデフォルトの×ボタンを非表示に */
  .gm-ui-hover-effect, .gm-style-iw-ch {
    display: none !important;
  }
</style>